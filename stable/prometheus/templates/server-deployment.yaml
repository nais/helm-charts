apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ template "prometheus.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.server.name }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "prometheus.server.fullname" . }}
spec:
  replicas: {{ .Values.server.replicaCount }}
  {{- if .Values.server.strategy }}
  strategy:
{{ toYaml .Values.server.strategy | indent 4 }}
  {{- end }}
  template:
    metadata:
    {{- if .Values.server.podAnnotations }}
      annotations:
{{ toYaml .Values.server.podAnnotations | indent 8 }}
    {{- end }}
      labels:
        app: {{ template "prometheus.name" . }}
        component: "{{ .Values.server.name }}"
        release: {{ .Release.Name }}
    spec:
      securityContext:
        runAsUser: 0
      serviceAccountName: {{ if .Values.rbac.create }}{{ template "prometheus.server.fullname" . }}{{ else }}"{{ .Values.server.serviceAccountName }}"{{ end }}
      containers:
        - name: {{ template "prometheus.name" . }}-{{ .Values.server.name }}-{{ .Values.configmapReload.name }}
          image: "{{ .Values.configmapReload.image.repository }}:{{ .Values.configmapReload.image.tag }}"
          imagePullPolicy: "{{ .Values.configmapReload.image.pullPolicy }}"
          args:
            - --volume-dir=/etc/config
            {{- if .Values.server.alertRulesConfigMaps.naisRules.mount }}
            - --volume-dir=/etc/nais-rules
            {{- end }}
            {{- if .Values.server.alertRulesConfigMaps.clusterRules.mount }}
            - --volume-dir=/etc/cluster-rules
            {{- end }}
            {{- if .Values.server.alertRulesConfigMaps.appRules.mount }}
            - --volume-dir=/etc/app-rules
            {{- end }}
            - --webhook-url=http://localhost:9090{{ .Values.server.baseURL }}/-/reload
          resources:
{{ toYaml .Values.configmapReload.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
            {{- if .Values.server.alertRulesConfigMaps.naisRules.mount }}
            - name: nais-rules-volume
              mountPath: /etc/nais-rules
              readOnly: true
            {{- end }}
            {{- if .Values.server.alertRulesConfigMaps.clusterRules.mount }}
            - name: cluster-rules-volume
              mountPath: /etc/cluster-rules
              readOnly: true
            {{- end }}
            {{- if .Values.server.alertRulesConfigMaps.appRules.mount }}
            - name: app-rules-volume
              mountPath: /etc/app-rules
              readOnly: true
            {{- end }}
        - name: {{ template "prometheus.name" . }}-{{ .Values.server.name }}
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
          imagePullPolicy: "{{ .Values.server.image.pullPolicy }}"
          args:
          {{- if .Values.server.retention.time }}
            - --storage.tsdb.retention.time={{ .Values.server.retention.time }}
          {{- end }}
          {{- if .Values.server.retention.size }}
            - --storage.tsdb.retention.size={{ .Values.server.retention.size }}
          {{- end }}
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path={{ .Values.server.persistentVolume.mountPath }}
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          {{- range $key, $value := .Values.server.extraArgs }}
            - --{{ $key }}={{ $value }}
          {{- end }}
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: {{ .Values.server.baseURL }}/status
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
{{ toYaml .Values.server.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            {{- if .Values.server.alertRulesConfigMaps.naisRules.mount }}
            - name: nais-rules-volume
              mountPath: /etc/nais-rules
              readOnly: true
            {{- end }}
            {{- if .Values.server.alertRulesConfigMaps.clusterRules.mount }}
            - name: cluster-rules-volume
              mountPath: /etc/cluster-rules
              readOnly: true
            {{- end }}
            {{- if .Values.server.alertRulesConfigMaps.appRules.mount }}
            - name: app-rules-volume
              mountPath: /etc/app-rules
              readOnly: true
            {{- end }}
            - name: storage-volume
              mountPath: {{ .Values.server.persistentVolume.mountPath }}
              subPath: "{{ .Values.server.persistentVolume.subPath }}"
          {{- range .Values.server.extraHostPathMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
    {{- if .Values.server.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.server.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.server.tolerations }}
      tolerations:
{{ toYaml .Values.server.tolerations | indent 8 }}
    {{- end }}
    {{- if .Values.server.affinity }}
      affinity:
{{ toYaml .Values.server.affinity | indent 8 }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.server.terminationGracePeriodSeconds }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ if .Values.server.configMapOverrideName }}{{ .Release.Name }}-{{ .Values.server.configMapOverrideName }}{{- else }}{{ template "prometheus.server.fullname" . }}{{- end }}
        {{- if .Values.server.alertRulesConfigMaps.naisRules.mount }}
        - name: nais-rules-volume
          configMap:
            name: {{ .Values.server.alertRulesConfigMaps.naisRules.name }}
        {{- end }}
        {{- if .Values.server.alertRulesConfigMaps.clusterRules.mount }}
        - name: cluster-rules-volume
          configMap:
            name: {{ .Values.server.alertRulesConfigMaps.clusterRules.name }}
        {{- end }}
        {{- if .Values.server.alertRulesConfigMaps.appRules.mount }}
        - name: app-rules-volume
          configMap:
            name: {{ .Values.server.alertRulesConfigMaps.appRules.name }}
        {{- end }}
        - name: storage-volume
        {{- if .Values.server.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.server.persistentVolume.existingClaim }}{{ .Values.server.persistentVolume.existingClaim }}{{- else }}{{ template "prometheus.server.fullname" . }}{{- end }}
        {{- else }}
          emptyDir: {}
        {{- end -}}
      {{- range .Values.server.extraHostPathMounts }}
        - name: {{ .name }}
          hostPath:
            path: {{ .hostPath }}
      {{- end }}
